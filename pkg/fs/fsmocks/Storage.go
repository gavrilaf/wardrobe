// Code generated by mockery v1.0.0. DO NOT EDIT.

package fsmocks

import (
	context "context"

	fs "github.com/gavrilaf/wardrobe/pkg/fs"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateBucket provides a mock function with given fields: ctx, name
func (_m *Storage) CreateBucket(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFile provides a mock function with given fields: ctx, f
func (_m *Storage) CreateFile(ctx context.Context, f fs.File) error {
	ret := _m.Called(ctx, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fs.File) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFile provides a mock function with given fields: ctx, bucketName, fileName
func (_m *Storage) GetFile(ctx context.Context, bucketName string, fileName string) (fs.File, error) {
	ret := _m.Called(ctx, bucketName, fileName)

	var r0 fs.File
	if rf, ok := ret.Get(0).(func(context.Context, string, string) fs.File); ok {
		r0 = rf(ctx, bucketName, fileName)
	} else {
		r0 = ret.Get(0).(fs.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsBucketExists provides a mock function with given fields: ctx, name
func (_m *Storage) IsBucketExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *Storage) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
